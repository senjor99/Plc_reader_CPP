TYPE "JT_INFO"
VERSION : 0.1
   STRUCT
      ID { S7_SetPoint := 'True'} : Int;   // Component ID
      VR { S7_SetPoint := 'True'} : Int;   // Component Variant
      OP { S7_SetPoint := 'True'} : Int;   // Operation where tightening must to be done
      JT { S7_SetPoint := 'True'} : Int;   // Joint Number
      SPN : Int;   // Sequencial Process Number
      OR { S7_SetPoint := 'True'} : Array[0..0] of Char;   // 'L' LeftHandSide 'R' RightHandSide
      KE_CH { S7_SetPoint := 'True'} : Int;   // KE and Channel address (KE nr°1 / CH nr°1 = 11)
      PGM : Int;   // Tightening program
      POS { S7_SetPoint := 'True'} : Int;   // Pointer to Position Parameter table on HMI OP
      SKT { S7_SetPoint := 'True'} : Int;   // Soket code
      TYP { S7_SetPoint := 'True'} : Int;   // Nut runner Type (0=Auto / 1=Mano)
      FLAG : Struct   // Flag
         MR_OFF { S7_SetPoint := 'True'} : Bool;   // Manual Rework Enable = 1
         Res2 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res3 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res4 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res5 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res6 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res7 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res8 { S7_SetPoint := 'True'} : Bool;   // Reserve
      END_STRUCT;
      SYN { S7_SetPoint := 'True'} : Int;   // Pointer to SYN parameter table on HMI OP
      ATNR { S7_SetPoint := 'True'} : Int;   // Number of attempts permitted
   END_STRUCT;

END_TYPE

TYPE "LD_INFO"
VERSION : 0.1
   STRUCT
      ID { S7_SetPoint := 'True'} : Int;   // Component ID
      VR { S7_SetPoint := 'True'} : Int;   // Component Variant
      OP { S7_SetPoint := 'True'} : Int;   // Operation where tightening must to be done
      OR { S7_SetPoint := 'True'} : Array[0..0] of Char;   // 'L' LeftHandSide 'R' RightHandSide
      DS { S7_SetPoint := 'True'} : Array[1..12] of Char := [12(' ')];   // Description
      SPN { S7_SetPoint := 'True'} : Int;   // Sequencial Proccess Number
      MSK { S7_SetPoint := 'True'} : Int;   // Mask address for Component Check
      SCAN_IDX { S7_SetPoint := 'True'} : Byte;   // Scanner Index
      SYN { S7_SetPoint := 'True'} : Byte;   // Box position on SYN (123> LH / 456>RH)
      PLC : Struct   // PLC Flags
         CC { S7_SetPoint := 'True'} : Bool;   // Component Check
         Res2 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res3 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res4 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res5 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res6 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res7 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res8 { S7_SetPoint := 'True'} : Bool;   // Reserve
      END_STRUCT;
      SFS : Struct   // SFS Flags
         PN_LH { S7_SetPoint := 'True'} : Bool;   // Scan Part Number LH
         PN_RH { S7_SetPoint := 'True'} : Bool;   // Scan Part Number RH
         SN_LH { S7_SetPoint := 'True'} : Bool;   // Scan Serial Number LH
         SN_RH { S7_SetPoint := 'True'} : Bool;   // Scan Serial Number RH
         Res5 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res6 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res7 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res8 { S7_SetPoint := 'True'} : Bool;   // Reserve
      END_STRUCT;
      PN1 { S7_SetPoint := 'True'} : Array[1..24] of Char;   // Part Number 1
      PN2 { S7_SetPoint := 'True'} : Array[1..24] of Char;   // Part Number 2
   END_STRUCT;

END_TYPE

TYPE "PS_INFO"
VERSION : 0.1
   STRUCT
      ID { S7_SetPoint := 'True'} : Int;   // Component ID
      VR { S7_SetPoint := 'True'} : Int;   // Component Variant
      OP { S7_SetPoint := 'True'} : Int;   // Operation where pressing must be done
      OR { S7_SetPoint := 'True'} : Array[0..0] of Char;   // 'L' LeftHandSide 'R' RightHandSide
      PS { S7_SetPoint := 'True'} : Int;   // Press number
      SPN { S7_SetPoint := 'True'} : Int;   // Sequencial Process Number
      PGM { S7_SetPoint := 'True'} : Int;   // Pressing program
      CH { S7_SetPoint := 'True'} : Int;   // Channel
      POS { S7_SetPoint := 'True'} : Int;   // Pointer to Position Parameter table on HMI OP
      TOOL { S7_SetPoint := 'True'} : Int;   // Tool Number
      FLAG : Struct   // Flag
         MR_OFF { S7_SetPoint := 'True'} : Bool;   // Manual Rework Enable = 1
         RES2 { S7_SetPoint := 'True'} : Bool;   // Reserve
         RES3 { S7_SetPoint := 'True'} : Bool;   // Reserve
         RES4 { S7_SetPoint := 'True'} : Bool;   // Reserve
         RES5 { S7_SetPoint := 'True'} : Bool;   // Reserve
         RES6 { S7_SetPoint := 'True'} : Bool;   // Reserve
         RES7 { S7_SetPoint := 'True'} : Bool;   // Reserve
         RES8 { S7_SetPoint := 'True'} : Bool;   // Reserve
      END_STRUCT;
      SYN { S7_SetPoint := 'True'} : Int;   // Pointer to SYN parameter table on HMI OP
   END_STRUCT;

END_TYPE

TYPE "TS_INFO"
VERSION : 0.1
   STRUCT
      ID { S7_SetPoint := 'True'} : Int;   // Component ID
      VR { S7_SetPoint := 'True'} : Int;   // Component Variant
      OP { S7_SetPoint := 'True'} : Int;   // Operation where Testing must  be done
      OR { S7_SetPoint := 'True'} : Array[0..0] of Char;   // 'L' LeftHandSide 'R' RightHandSide
      TS { S7_SetPoint := 'True'} : Int;   // Test Number
      SPN { S7_SetPoint := 'True'} : Int;   // Sequencial Process Number
      PGM { S7_SetPoint := 'True'} : Int;   // Test program
      CH { S7_SetPoint := 'True'} : Int;   // Test Channel
      FLAG : Struct   // Flags
         MR_OFF { S7_SetPoint := 'True'} : Bool;   // Manual Rework Enable = 1
         Res2 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res3 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res4 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res5 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res6 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res7 { S7_SetPoint := 'True'} : Bool;   // Reserve
         Res8 { S7_SetPoint := 'True'} : Bool;   // Reserve
      END_STRUCT;
      SYN { S7_SetPoint := 'True'} : Int;   // Pointer to SYN parameter table on HMI OP
      Reserve { S7_SetPoint := 'True'} : Int;   // Reserve
   END_STRUCT;

END_TYPE

TYPE "PV_CONTAINER"
VERSION : 0.1
   STRUCT
      ID : Int;   // Content of Container
      NR : Int;   // Number of ID
      OR : Array[1..2] of Char;   // Orientation
      DATA : Array[1..32] of Char;   // Data
   END_STRUCT;

END_TYPE

TYPE "SFS_PV"
VERSION : 0.1
   STRUCT
      ID : Int;   // Process Value ID
      NR : Int;   // Process Value Number
      ZSB1 : Char;   // Assy the process belongs 1 to (CL,CR,FS..) |Zusammenbau|
      ZSB2 : Char;   // Assy the process belongs 2 to (CL,CR,FS..) |Zusammenbau|
   END_STRUCT;

END_TYPE

TYPE "TAG_OP_STATUS"
VERSION : 0.1
   STRUCT
      WK : Char;   // 'W' = DONE - 'N' = NOT DONE
      ST : Char;   // 'I' = IO 'N' = NIO 'S' = SCRAP
   END_STRUCT;

END_TYPE

TYPE "TAG_OP_ADDRESS"
VERSION : 0.1
   STRUCT
      OP : Int;   // Station Number
      JTSTX_EL : DInt;   // Joint Index Start Address
      JTQT_EL : DInt;   // Joint Quantity of Elements
      LDSTX_EL : DInt;   // Load Index Start Address
      LDQT_EL : DInt;   // Load Quantity of Elements
      PSSTX_EL : DInt;   // Pressing Index Start Address
      PSQT_EL : DInt;   // Pressing Quantity of Elements
      TSSTX_EL : DInt;   // Testing Quantity of Elements
      TSQT_EL : DInt;   // Testing Index Start Address
      PVSTX_EL : DInt;   // PV Process Value Start Address
      PVQT_EL : DInt;   // PV Process Value Quantity
   END_STRUCT;

END_TYPE

TYPE "ORDER"
VERSION : 0.1
   STRUCT
      ProductionNumber : Array[1..20] of Char;   // Order no. (VIN)
      ProductionSequnce : Array[1..20] of Char;   // Sequence no. (OEM)
      OEM_line : Byte;   // OEM line
      OEM_plant : Byte;   // OEM plant
      "Date" : Array[1..6] of Char;   // Current Date as YYMMDD
      "Time" : Array[1..6] of Char;   // Current Time as HHMMSS
      BoxNumber : DInt;   // Custumer Box no. (JIT Rack)
      BoxPosition : Int;   // Rack Position
      BID1 : Array[1..12] of Char;   // Internal ID (BentelerID) main line or ID Left hand (also for safety parts)
      BID2 : Array[1..12] of Char;   // Internal ID (BentelerID) main line or ID Right hand
      "Rotation-No." : Array[1..6] of Char;   // Rotation Number (Right aligned e.g. 000012" number from 1 .. 9999)
      OrderType : Struct   // Different Type of orders; information for the worker.
         NormalProduction : Bool;   // Normal Production
         "1stSafetyPartStock" : Bool;   // 1st safety part stock
         "2ndSafetyPartStock" : Bool;   // 2nd safety part stock
         ReorderBeforeMarriage : Bool;   // Internal Reorder part rescheduled before marriage station
         ReorderAfterMarriage : Bool;   // Internal Reorder part rescheduled after marriage station
         TestModules : Bool;   // Test Modules
         CustomerReorder : Bool;   // Customer Reorder
         DefferedOrder : Bool;   // Deffered Order
         ScrapOrder : Bool;   // Scrap Order
         NotUsed_10 : Bool;   // Not used
         NotUsed_11 : Bool;   // Not used
         NotUsed_12 : Bool;   // Not used
         NotUsed_13 : Bool;   // Not used
         NotUsed_14 : Bool;   // Not used
         NotUsed_15 : Bool;   // Not used
         NotUsed_16 : Bool;   // Not used
      END_STRUCT;
      CarType : Int;   // Car Type
      "Lot-No" : Array[1..20] of Char;   // Lot-Number (Spec. for Powertrain)
      RES : Array[1..17] of Word;   // Reserve
   END_STRUCT;

END_TYPE

TYPE "PAR_ADDRESS"
VERSION : 0.1
   STRUCT
      JT_STX : DInt := 0;   // JOINT LIST START ADDRESS IN TAG DB ( BYTE N°)
      LD_STX : DInt := 0;   // LOAD LIST START ADDRESS IN TAG DB ( BYTE N°)
      PS_STX : DInt := 0;   // PRESS LIST START ADDRESS IN TAG DB ( BYTE N°)
      TS_STX : DInt := 17664;   // TEST LIST START ADDRESS IN TAG DB ( BYTE N°)
      PV_STX : DInt := 1;   // PV LIST START ADDRESS IN TAG DB ( BYTE N°)
      "JT_BY/EL" : DInt := 0;   // JOINT LIST - BYTE/ELEMENT
      "LD_BY/EL" : DInt := 0;   // LOAD LIST - BYTE/ELEMENT
      "PS_BY/EL" : DInt := 0;   // PRESS LIST - BYTE/ELEMENT
      "TS_BY/EL" : DInt := 0;   // TEST LIST - BYTE/ELEMENT
      "PV_BY/EL" : DInt := 0;   // PROCESS VALUE BYTE/ELEMENT
   END_STRUCT;

END_TYPE

TYPE "TAG_DATA"
VERSION : 0.1
   STRUCT
      JT : Array[0..150] of "JT_INFO";   // Joint Info
      LD : Array[0..150] of "LD_INFO" := [((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()]), ((), (), (), [()], [12(' ')], (), (), (), (), (), (), [()], [()])];   // Loading Info
      PS : Array[0..10] of "PS_INFO";   // Pressing Info
      TS : Array[0..40] of "TS_INFO";   // Test Info
      PV : Array[0..300] of "PV_CONTAINER";   // Process Value
      SFS_PV : Array[0..300] of "SFS_PV";   // SFS Process Value
   END_STRUCT;

END_TYPE

DATA_BLOCK "GA1_S1_TAG DB"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   STRUCT 
      WPC : Int;   // Work Piece Carrier
      OD : "ORDER";   // Order structure
      PAR : "PAR_ADDRESS";   // Parameter address structure
      OP : Array[0..60] of "TAG_OP_STATUS";   // Station Structure
      STC : Array[0..60] of "TAG_OP_ADDRESS";   // Structure Address of OPs
      DATA : "TAG_DATA";   // Jobs Datas Strcture
      End { S7_SetPoint := 'True'} : Bool;   // End Data
   END_STRUCT;


BEGIN
   OD.OEM_line := 16#00;
   OD.OEM_plant := 16#01;
   OD."Date"[1] := '1';
   OD."Date"[2] := '6';
   OD."Date"[3] := '0';
   OD."Date"[4] := '9';
   OD."Date"[5] := '3';
   OD."Date"[6] := '0';
   OD."Time"[1] := '1';
   OD."Time"[2] := '4';
   OD."Time"[3] := '0';
   OD."Time"[4] := '0';
   OD."Time"[5] := '2';
   OD."Time"[6] := '6';
   OD.BID1[1] := 'C';
   OD.BID1[2] := '1';
   OD.BID1[3] := '5';
   OD.BID1[4] := '1';
   OD.BID1[5] := '2';
   OD.BID1[6] := '6';
   OD.BID1[7] := 'C';
   OD.BID1[8] := 'L';
   OD.BID1[9] := '0';
   OD.BID1[10] := '0';
   OD.BID1[11] := '3';
   OD.BID1[12] := '2';
   OD.BID2[1] := 'C';
   OD.BID2[2] := '1';
   OD.BID2[3] := '5';
   OD.BID2[4] := '1';
   OD.BID2[5] := '2';
   OD.BID2[6] := '6';
   OD.BID2[7] := 'C';
   OD.BID2[8] := 'R';
   OD.BID2[9] := '0';
   OD.BID2[10] := '0';
   OD.BID2[11] := '3';
   OD.BID2[12] := '2';
   OD.RES[1] := 16#2000;
   OD.RES[2] := 16#0000;
   OD.RES[3] := 16#0000;
   OD.RES[4] := 16#0000;
   OD.RES[5] := 16#0000;
   OD.RES[6] := 16#0000;
   OD.RES[7] := 16#0000;
   OD.RES[8] := 16#0000;
   OD.RES[9] := 16#0000;
   OD.RES[10] := 16#0000;
   OD.RES[11] := 16#2000;
   OD.RES[12] := 16#0000;
   OD.RES[13] := 16#0000;
   OD.RES[14] := 16#0000;
   OD.RES[15] := 16#0000;
   OD.RES[16] := 16#0000;
   OD.RES[17] := 16#0000;
   PAR.JT_STX := 2874;
   PAR.LD_STX := 6822;
   PAR.PS_STX := 16778;
   PAR.TS_STX := 17680;
   PAR.PV_STX := 1;
   PAR."JT_BY/EL" := 28;
   PAR."LD_BY/EL" := 76;
   PAR."PS_BY/EL" := 22;
   PAR."TS_BY/EL" := 20;
   PAR."PV_BY/EL" := 1;

END_DATA_BLOCK

